## Multi-stage build for maanaging dev dependencies

######################################
#
# Proto gen stage
#
######################################
FROM uber/prototool:latest as proto-builder

ARG GIT_TOKEN

RUN apk add --update --no-cache --repository https://dl-4.alpinelinux.org/alpine/latest-stable/community/ make git

RUN mkdir -p /src/scripts
WORKDIR /src

# App source code is not required for this stage, only add what's needed
ADD Makefile /src
ADD scripts/proto_modules /src/scripts

RUN make proto-refresh

######################################
#
# Compilation build stage
#
######################################
FROM golang:1.14-alpine3.12  as builder

ARG GIT_TOKEN
ENV CGO_ENABLED 0

RUN mkdir /src
WORKDIR /src

RUN apk add --update --no-cache --repository http://dl-4.alpinelinux.org/alpine/latest-stable/community/ make openssh ca-certificates git make && update-ca-certificates 2>/dev/null || true

# Fetch proto from previous step
COPY --from=proto-builder /src/rpc /src/rpc

# Avoid copying source first since that will invalidate cache for all further layers
COPY go.mod .
COPY go.sum .

# Get dependencies using go.mod and go.sum
# This should be cached unless we modify go.mod/go.sum
RUN set -eux && \
    echo 'exec echo ${GIT_TOKEN}' > /tmp/askpass.sh && \
    chmod +x /tmp/askpass.sh && \
    export GIT_ASKPASS=/tmp/askpass.sh && \
    go mod vendor

# Copy rest of the source code
ADD . /src

RUN make go-build-worker

######################################
#
# Distribution build stage
#
######################################
FROM alpine:3.12
ARG GIT_COMMIT_HASH
COPY --from=builder /src/bin/worker/ /app/
COPY --from=builder /src/config/ /app/config/
COPY build/docker/probe.sh /app/
COPY build/docker/entrypoint.sh /app/

ENV WORKDIR=/app
ENV DUMB_INIT_SETSID=0
WORKDIR /app
RUN apk add --update --no-cache ca-certificates dumb-init su-exec curl

ENV GIT_COMMIT_HASH=${GIT_COMMIT_HASH}
RUN mkdir -p /app/public && \
    echo "$GIT_COMMIT_HASH" > /app/public/commit.txt
RUN chmod +x entrypoint.sh
ENTRYPOINT ["/app/entrypoint.sh", "$app_name-worker"]
