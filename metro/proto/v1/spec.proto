syntax = "proto3";

package google.pubsub.v1;

option go_package = "github.com/razorpay/metro-proto/metro/proto/v1;metrov1";

import "google/api/annotations.proto";
import "google/api/field_behaviour.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";


// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        version: "1.0"
    }
    external_docs: {
        url: "https://github.com/razorpay/metro-proto"
        description: "protobuf definitions for metro"
    }
    schemes: HTTP
    schemes: HTTPS
    security_definitions: {
        security: {
            key: "basicAuth"
            value: {
                type: TYPE_BASIC
            }
        }
    }
    security: {
        security_requirement: {
            key: "basicAuth",
        }
    }
};

message StatusCheckResponse {
    // ServingStatus denotes the status of the service.
    enum ServingStatus {
        SERVING_STATUS_INVALID = 0;
        SERVING_STATUS_UNKNOWN = 1;
        SERVING_STATUS_SERVING = 2;
        SERVING_STATUS_NOT_SERVING = 3;
    }
    ServingStatus serving_status = 1;
}

// StatusCheckAPI defines the liveness and readiness check service.
service StatusCheckAPI {
    rpc ReadinessCheck(google.protobuf.Empty) returns (StatusCheckResponse) {
        option (google.api.http) = {
            // Route to this method from GET requests to /v1/readiness
            get: "/v1/readiness"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Do a readiness check"
            description: "Checks responsiveness of all the dependant resources that the service is using"
            tags: "StatusCheck"
            security: {}
        };
    }

    rpc LivenessCheck(google.protobuf.Empty) returns (StatusCheckResponse) {
        option (google.api.http) = {
            // Route to this method from GET requests to /v1/liveness
            get: "/v1/liveness"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Do a liveness check"
            description: "Checks only for the responsiveness of the service"
            tags: "StatusCheck"
            security: {}
        };
    }
}

service AdminService {
    rpc CreateProject(Project) returns (Project){
        option (google.api.http) = {
            post: "/v1/projects"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Create a project"
            description: "Topics and Subscriptions belong to a project"
            tags: "Project"
        };
    }

    rpc DeleteProject(Project) returns (google.protobuf.Empty){
        option (google.api.http) = {
            delete: "/v1/projects/{project_id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Delete a project"
            description: "Delete a project"
            tags: "Project"
        };
    }

    rpc ModifyTopic(AdminTopic) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v1/admin/{name=projects/*/topics/*}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Modify an already created topic params"
            description: "Modifies an existing topic"
            tags: "AdminTopic"
        };
    }

    rpc CreateProjectCredentials(ProjectCredentials) returns (ProjectCredentials){
        option (google.api.http) = {
            post: "/v1/projects/{project_id}/credentials"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Create new project credentials for an app"
            description: "Credentials to be used for all operations under this project by the app"
            tags: "Project"
        };
    }

    rpc DeleteProjectCredentials(ProjectCredentials) returns (google.protobuf.Empty){
        option (google.api.http) = {
            delete: "/v1/projects/{project_id}/credentials/{username}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Delete project specific credentials"
            description: "Delete the credentials created under the project"
            tags: "Project"
        };
    }

    rpc GetProjectCredentials(ProjectCredentials) returns (ProjectCredentials){
        option (google.api.http) = {
            get: "/v1/projects/{project_id}/credentials/{username}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get Project Credentials for the given username"
            description: "Get the project credentials from username"
            tags: "Project"
        };
    }

    rpc ListProjectCredentials(ProjectCredentials) returns (ProjectCredentialsList){
        option (google.api.http) = {
            get: "/v1/projects/{project_id}/credentials"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "List Project Credentials"
            description: "List all the project credentials for the given projectId"
            tags: "Project"
        };
    }

    rpc MigrateSubscriptions(Subscriptions) returns (google.protobuf.Empty){
        option (google.api.http) = {
            post: "/v1/admin/subscriptions/migrate"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Takes care of migrating old subscriptions model to new"
            description: "Takes care of migrating old subscriptions model to new"
            tags: "AdminSubscription"
        };
    }
}

message Project {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
  string project_id = 2 [(google.api.field_behavior) = REQUIRED];
  map<string, string> labels = 3;
}

message ProjectCredentials {
  string project_id = 1 [(google.api.field_behavior) = REQUIRED];
  string username = 2;
  string password = 3;
}

message ProjectCredentialsList {
    repeated ProjectCredentials project_credentials = 1;
}

message Subscriptions {
  repeated string names = 1 [(google.api.field_behavior) = OPTIONAL];
}

service Publisher {

    // Creates the given topic with the given name
    rpc CreateTopic(Topic) returns (Topic) {
        option (google.api.http) = {
            put: "/v1/{name=projects/*/topics/*}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Create a topic"
            description: "Topic creation is required before messages can be published"
            tags: "Topic"
        };
    }

    // Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic
    // does not exist.
    rpc Publish(PublishRequest) returns (PublishResponse) {
        option (google.api.http) = {
            post: "/v1/{topic=projects/*/topics/*}:publish"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Publish a message"
            description: "Publishes a message to a topic"
            tags: "Topic"
        };
    }

    // Deletes the topic with the given name. Returns `NOT_FOUND` if the topic
    // does not exist. After a topic is deleted, a new topic may be created with
    // the same name; this is an entirely new topic with none of the old
    // configuration or subscriptions. Existing subscriptions to this topic are
    // not deleted, but their `topic` field is set to `_deleted-topic_`.
    rpc DeleteTopic(DeleteTopicRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/{topic=projects/*/topics/*}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Delete a topic"
            description: "Delete a topic"
            tags: "Topic"
        };
    }

    // Lists the names of the topics in the given project.
    rpc ListProjectTopics(ListProjectTopicsRequest) returns (ListProjectTopicsResponse) {
        option (google.api.http) = {
            get: "/v1/projects/{project_id}/topics"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "List Project Topics"
            description: "Get all the topics created in the given project"
            tags: "Topics"
        };
    }
}

// A topic resource.
message Topic {
    // Required. The name of the topic. It must have the format
    // `"projects/{project}/topics/{topic}"`. `{topic}` must start with a letter,
    // and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
    // underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent
    // signs (`%`). It must be between 3 and 255 characters in length, and it
    // must not start with `"goog"`.
    string name = 1 [(google.api.field_behavior) = REQUIRED];

    map<string, string> labels = 2;
}

message DeleteTopicRequest {
    // Required. Name of the topic to delete.
    // Format is `projects/{project}/topics/{topic}`.
    string topic = 1 [(google.api.field_behavior) = REQUIRED];
}

// Request for the Publish method.
message PublishRequest {
    // Required. The messages in the request will be published on this topic.
    // Format is `projects/{project}/topics/{topic}`.
    string topic = 1 [(google.api.field_behavior) = REQUIRED];

    // Required. The messages to publish.
    repeated PubsubMessage messages = 2 [(google.api.field_behavior) = REQUIRED];
}

// Response for the `Publish` method.
message PublishResponse {
    // The server-assigned ID of each published message, in the same order as
    // the messages in the request. IDs are guaranteed to be unique within
    // the topic.
    repeated string message_ids = 1;
}

message PubsubMessage {
    // The message data field. If this field is empty, the message must contain
    // at least one attribute.
    bytes data = 1;

    // Attributes for this message. If this field is empty, the message must
    // contain non-empty data. This can be used to filter messages on the
    // subscription.
    map<string, string> attributes = 2;

    // ID of this message, assigned by the server when the message is Produceed.
    // Guaranteed to be unique within the topic. This value may be read by a
    // subscriber that receives a `Message` via a `Pull` call or a push
    // delivery. It must not be populated by the Producer in a `Produce` call.
    string message_id = 3;

    // The time at which the message was published, populated by the server when
    // it receives the `Publish` call. It must not be populated by the
    // publisher in a `Publish` call.
    google.protobuf.Timestamp publish_time = 4;

    // If non-empty, identifies related messages for which Produce order should be
    // respected. If a `Subscription` has `enable_message_ordering` set to `true`,
    // messages Produceed with the same non-empty `ordering_key` value will be
    // delivered to subscribers in the order in which they are received by the
    // Pub/Sub system. All `PubsubMessage`s Produceed in a given `ProduceRequest`
    // must specify the same `ordering_key` value.
    string ordering_key = 5;
}

// Request for the `ListProjectTopics` method.
message ListProjectTopicsRequest {
    // Required. The project_id in which topics are created.
    string project_id = 1 [(google.api.field_behavior) = REQUIRED];
}

// Response for the `ListProjectTopics` method.
message ListProjectTopicsResponse {
    // The names of topics created in the specified project.
    repeated string topics = 1;
}

// The service that an application uses to manipulate subscriptions and to
// consume messages from a subscription via the `Pull` method or by
// establishing a bi-directional stream using the `StreamingPull` method.
service Subscriber {
    // Creates a subscription to a given topic. See the [resource name rules]
    // (https://cloud.google.com/pubsub/docs/admin#resource_names).
    // If the subscription already exists, returns `ALREADY_EXISTS`.
    // If the corresponding topic doesn't exist, returns `NOT_FOUND`.
    //
    // If the name is not provided in the request, the server will assign a random
    // name for this subscription on the same project as the topic, conforming
    // to the [resource name format]
    // (https://cloud.google.com/pubsub/docs/admin#resource_names). The generated
    // name is populated in the returned Subscription object. Note that for REST
    // API requests, you must specify a name in the request.
    rpc CreateSubscription(Subscription) returns (Subscription) {
        option (google.api.http) = {
            put: "/v1/{name=projects/*/subscriptions/*}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Create a Subscription"
            description: "A subscription is created on a given topic"
            tags: "Subscriptions"
        };
    }

    // Updates an existing subscription. Note that certain properties of a
    // subscription, such as its topic, are not modifiable.
    rpc UpdateSubscription(UpdateSubscriptionRequest) returns (Subscription) {
        option (google.api.http) = {
        patch: "/v1/{subscription.name=projects/*/subscriptions/*}"
        body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Update a Subscription"
            description: "Updates an existing subscription. Note that certain properties of a subscription, such as its topic, are not modifiable"
            tags: "Subscriptions"
        };
    }


    // Acknowledges the messages associated with the `ack_ids` in the
    // `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages
    // from the subscription.
    //
    // Acknowledging a message whose ack deadline has expired may succeed,
    // but such a message may be redelivered later. Acknowledging a message more
    // than once will not result in an error.
    rpc Acknowledge(AcknowledgeRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/{subscription=projects/*/subscriptions/*}:acknowledge"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Acknowledge messages"
            description: "Acknowledge messages associated with ack_ids"
            tags: "Subscriptions"
        };
    }

    // Pulls messages from the server. The server may return `UNAVAILABLE` if
    // there are too many concurrent pull requests pending for the given
    // subscription.
    rpc Pull(PullRequest) returns (PullResponse) {
        option (google.api.http) = {
            post: "/v1/{subscription=projects/*/subscriptions/*}:pull"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Pull messages"
            description: "Pull messages for a subscription"
            tags: "Subscriptions"
        };
    }

    // Establishes a stream with the server, which sends messages down to the
    // client. The client streams acknowledgements and ack deadline modifications
    // back to the server. The server will close the stream and return the status
    // on any error. The server may close the stream with status `UNAVAILABLE` to
    // reassign server-side resources, in which case, the client should
    // re-establish the stream. Flow control can be achieved by configuring the
    // underlying RPC channel.
    rpc StreamingPull(stream StreamingPullRequest)
        returns (stream StreamingPullResponse) {}

    // Deletes an existing subscription. All messages retained in the subscription
    // are immediately dropped. Calls to `Pull` after deletion will return
    // `NOT_FOUND`. After a subscription is deleted, a new one may be created with
    // the same name, but the new one has no association with the old
    // subscription or its topic unless the same topic is specified.
    rpc DeleteSubscription(DeleteSubscriptionRequest)
        returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/{subscription=projects/*/subscriptions/*}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Delete a subscription"
            description: "Delete a subscription"
            tags: "Subscriptions"
        };
    }

    // Modifies the ack deadline for a specific message. This method is useful
    // to indicate that more time is needed to process a message by the
    // subscriber, or to make the message available for redelivery if the
    // processing was interrupted. Note that this does not modify the
    // subscription-level `ackDeadlineSeconds` used for subsequent messages.
    rpc ModifyAckDeadline(ModifyAckDeadlineRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/{subscription=projects/*/subscriptions/*}:modifyAckDeadline"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Modify Ack Deadline"
            description: "Modify Ack Deadline"
            tags: "Subscriptions"
        };
    }

    // Lists the names of the subscriptions on the given topic.
    rpc ListTopicSubscriptions(ListTopicSubscriptionsRequest) returns (ListTopicSubscriptionsResponse) {
        option (google.api.http) = {
            get: "/v1/{topic=projects/*/topics/*}/subscriptions"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "List Topic Subscriptions"
            description: "Get all the subscriptions created on the given topic"
            tags: "Subscriptions"
        };
    }

    // Lists the names of the subscriptions in the given project.
    rpc ListProjectSubscriptions(ListProjectSubscriptionsRequest) returns (ListProjectSubscriptionsResponse) {
        option (google.api.http) = {
            get: "/v1/projects/{project_id}/subscriptions"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "List Project Subscriptions"
            description: "Get all the subscriptions created in the given project"
            tags: "Subscriptions"
        };
    }
}

// Request for the UpdateSubscription method.
message UpdateSubscriptionRequest {
    // Required. The updated subscription object.
    Subscription subscription = 1 [(google.api.field_behavior) = REQUIRED];
  
    // Required. Indicates which fields in the provided subscription to update.
    // Must be specified and non-empty.
    google.protobuf.FieldMask update_mask = 2
        [(google.api.field_behavior) = REQUIRED];
}

// A subscription resource.
message Subscription {
    // Required. The name of the subscription. It must have the format
    // `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must
    // start with a letter, and contain only letters (`[A-Za-z]`), numbers
    // (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),
    // plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters
    // in length, and it must not start with `"goog"`.
    string name = 1 [(google.api.field_behavior) = REQUIRED];

    // Required. The name of the topic from which this subscription is receiving
    // messages. Format is `projects/{project}/topics/{topic}`. The value of this
    // field will be `_deleted-topic_` if the topic has been deleted.
    string topic = 2 [(google.api.field_behavior) = REQUIRED];

    // If push delivery is used with this subscription, this field is
    // used to configure it. An empty `pushConfig` signifies that the subscriber
    // will pull and ack messages using API methods.
    PushConfig push_config = 4;

    // The approximate amount of time (on a best-effort basis) Pub/Sub waits for
    // the subscriber to acknowledge receipt before resending the message. In the
    // interval after the message is delivered and before it is acknowledged, it
    // is considered to be <i>outstanding</i>. During that time period, the
    // message will not be redelivered (on a best-effort basis).
    //
    // For pull subscriptions, this value is used as the initial value for the ack
    // deadline. To override this value for a given message, call
    // `ModifyAckDeadline` with the corresponding `ack_id` if using
    // non-streaming pull or send the `ack_id` in a
    // `StreamingModifyAckDeadlineRequest` if using streaming pull.
    // The minimum custom deadline you can specify is 10 seconds.
    // The maximum custom deadline you can specify is 600 seconds (10 minutes).
    // If this parameter is 0, a default value of 10 seconds is used.
    //
    // For push delivery, this value is also used to set the request timeout for
    // the call to the push endpoint.
    //
    // If the subscriber never acknowledges the message, the Pub/Sub
    // system will eventually redeliver the message.
    int32 ack_deadline_seconds = 5;

    // Indicates whether to retain acknowledged messages. If true, then
    // messages are not expunged from the subscription's backlog, even if they are
    // acknowledged, until they fall out of the `message_retention_duration`
    // window. This must be true if you would like to [Seek to a timestamp]
    // (https://cloud.google.com/pubsub/docs/replay-overview#seek_to_a_time).
    bool retain_acked_messages = 7;

    // How long to retain unacknowledged messages in the subscription's backlog,
    // from the moment a message is published.
    // If `retain_acked_messages` is true, then this also configures the retention
    // of acknowledged messages, and thus configures how far back in time a `Seek`
    // can be done. Defaults to 7 days. Cannot be more than 7 days or less than 10
    // minutes.
    google.protobuf.Duration message_retention_duration = 8;

    // See <a href="https://cloud.google.com/pubsub/docs/labels"> Creating and
    // managing labels</a>.
    map<string, string> labels = 9;

    // If true, messages published with the same `ordering_key` in `PubsubMessage`
    // will be delivered to the subscribers in the order in which they
    // are received by the Pub/Sub system. Otherwise, they may be delivered in
    // any order.
    bool enable_message_ordering = 10;

    // A policy that specifies the conditions for this subscription's expiration.
    // A subscription is considered active as long as any connected subscriber is
    // successfully consuming messages from the subscription or is issuing
    // operations on the subscription. If `expiration_policy` is not set, a
    // *default policy* with `ttl` of 31 days will be used. The minimum allowed
    // value for `expiration_policy.ttl` is 1 day.
    ExpirationPolicy expiration_policy = 11;

    // An expression written in the Pub/Sub [filter
    // language](https://cloud.google.com/pubsub/docs/filtering). If non-empty,
    // then only `PubsubMessage`s whose `attributes` field matches the filter are
    // delivered on this subscription. If empty, then no messages are filtered
    // out.
    string filter = 12;

    // A policy that specifies the conditions for dead lettering messages in
    // this subscription. If dead_letter_policy is not set, dead lettering
    // is disabled.
    //
    // The Cloud Pub/Sub service account associated with this subscriptions's
    // parent project (i.e.,
    // service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
    // permission to Acknowledge() messages on this subscription.
    DeadLetterPolicy dead_letter_policy = 13;

    // A policy that specifies how Pub/Sub retries message delivery for this
    // subscription.
    //
    // If not set, the default retry policy is applied. This generally implies
    // that messages will be retried as soon as possible for healthy subscribers.
    // RetryPolicy will be triggered on NACKs or acknowledgement deadline
    // exceeded events for a given message.
    RetryPolicy retry_policy = 14;

    // Indicates whether the subscription is detached from its topic. Detached
    // subscriptions don't receive messages from their topic and don't retain any
    // backlog. `Pull` and `StreamingPull` requests will return
    // FAILED_PRECONDITION. If the subscription is a push subscription, pushes to
    // the endpoint will not be made.
    bool detached = 15;
}

// Configuration for a push delivery endpoint.
message PushConfig {
    // Contains information needed for generating an
    // [OpenID Connect
    // token](https://developers.google.com/identity/protocols/OpenIDConnect).
    message OidcToken {
        // [Service account
        // email](https://cloud.google.com/iam/docs/service-accounts)
        // to be used for generating the OIDC token. The caller (for
        // CreateSubscription, UpdateSubscription, and ModifyPushConfig RPCs) must
        // have the iam.serviceAccounts.actAs permission for the service account.
        string service_account_email = 1;

        // Audience to be used when generating OIDC token. The audience claim
        // identifies the recipients that the JWT is intended for. The audience
        // value is a single case-sensitive string. Having multiple values (array)
        // for the audience field is not supported. More info about the OIDC JWT
        // token audience here: https://tools.ietf.org/html/rfc7519#section-4.1.3
        // Note: if not specified, the Push endpoint URL will be used.
        string audience = 2;
    }

    // Implementation of authentication_method based on Basic Auth 
    // which uses username and password for authentication
    message BasicAuth {

        // Username that will be used in Basic Authentication method while calling the push endpoint
        string username = 1;

        // Password that will be used in Basic Authentication method while calling the push endpoint
        string password = 2;
    }

    // A URL locating the endpoint to which messages should be pushed.
    // For example, a Webhook endpoint might use `https://example.com/push`.
    string push_endpoint = 1;

    // Endpoint configuration attributes that can be used to control different
    // aspects of the message delivery.
    //
    // The only currently supported attribute is `x-goog-version`, which you can
    // use to change the format of the pushed message. This attribute
    // indicates the version of the data expected by the endpoint. This
    // controls the shape of the pushed message (i.e., its fields and metadata).
    //
    // If not present during the `CreateSubscription` call, it will default to
    // the version of the Pub/Sub API used to make such call. If not present in a
    // `ModifyPushConfig` call, its value will not be changed. `GetSubscription`
    // calls will always return a valid version, even if the subscription was
    // created without this attribute.
    //
    // The only supported values for the `x-goog-version` attribute are:
    //
    // * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API.
    // * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API.
    //
    // For example:
    // <pre><code>attributes { "x-goog-version": "v1" } </code></pre>
    map<string, string> attributes = 2;

    // An authentication method used by push endpoints to verify the source of
    // push requests. This can be used with push endpoints that are private by
    // default to allow requests only from the Cloud Pub/Sub system, for example.
    // This field is optional and should be set only by users interested in
    // authenticated push.
    oneof authentication_method {
        // If specified, Pub/Sub will generate and attach an OIDC JWT token as an
        // `Authorization` header in the HTTP request for every pushed message.
        OidcToken oidc_token = 3;

        // If provided, this basic auth credentials(username and password) will be used as an 
        // `Authorization` header in the HTTP request for every pushed message
        BasicAuth basic_auth = 4;
    }
}


// Dead lettering is done on a best effort basis. The same message might be
// dead lettered multiple times.
//
// If validation on any of the fields fails at subscription creation/updation,
// the create/update subscription request will fail.
message DeadLetterPolicy {
    // The name of the topic to which dead letter messages should be published.
    // Format is `projects/{project}/topics/{topic}`.The Cloud Pub/Sub service
    // account associated with the enclosing subscription's parent project (i.e.,
    // service-{project_number}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
    // permission to Publish() to this topic.
    //
    // The operation will fail if the topic does not exist.
    // Users should ensure that there is a subscription attached to this topic
    // since messages published to a topic with no subscriptions are lost.
    string dead_letter_topic = 1;

    // The maximum number of delivery attempts for any message. The value must be
    // between 5 and 100.
    //
    // The number of delivery attempts is defined as 1 + (the sum of number of
    // NACKs and number of times the acknowledgement deadline has been exceeded
    // for the message).
    //
    // A NACK is any call to ModifyAckDeadline with a 0 deadline. Note that
    // client libraries may automatically extend ack_deadlines.
    //
    // This field will be honored on a best effort basis.
    //
    // If this parameter is 0, a default value of 5 is used.
    int32 max_delivery_attempts = 2;
}

// A policy that specifies how Cloud Pub/Sub retries message delivery.
//
// Retry delay will be exponential based on provided minimum and maximum
// backoffs. https://en.wikipedia.org/wiki/Exponential_backoff.
//
// RetryPolicy will be triggered on NACKs or acknowledgement deadline exceeded
// events for a given message.
//
// Retry Policy is implemented on a best effort basis. At times, the delay
// between consecutive deliveries may not match the configuration. That is,
// delay can be more or less than configured backoff.
message RetryPolicy {
    // The minimum delay between consecutive deliveries of a given message.
    // Value should be between 0 and 600 seconds. Defaults to 10 seconds.
    google.protobuf.Duration minimum_backoff = 1;

    // The maximum delay between consecutive deliveries of a given message.
    // Value should be between 0 and 600 seconds. Defaults to 600 seconds.
    google.protobuf.Duration maximum_backoff = 2;
}

// A policy that specifies the conditions for resource expiration (i.e.,
// automatic resource deletion).
message ExpirationPolicy {
    // Specifies the "time-to-live" duration for an associated resource. The
    // resource expires if it is not active for a period of `ttl`. The definition
    // of "activity" depends on the type of the associated resource. The minimum
    // and maximum allowed values for `ttl` depend on the type of the associated
    // resource, as well. If `ttl` is not set, the associated resource never
    // expires.
    google.protobuf.Duration ttl = 1;
}

// Request for the Acknowledge method.
message AcknowledgeRequest {
    // Required. The subscription whose message is being acknowledged.
    // Format is `projects/{project}/subscriptions/{sub}`.
    string subscription = 1 [(google.api.field_behavior) = REQUIRED];

    // Required. The acknowledgment ID for the messages being acknowledged that
    // was returned by the Pub/Sub system in the `Pull` response. Must not be
    // empty.
    repeated string ack_ids = 2 [(google.api.field_behavior) = REQUIRED];
}

// Request for the `Pull` method.
message PullRequest {
    // Required. The subscription from which messages should be pulled.
    // Format is `projects/{project}/subscriptions/{sub}`.
    string subscription = 1 [(google.api.field_behavior) = REQUIRED];

    // Optional. If this field set to true, the system will respond immediately
    // even if it there are no messages available to return in the `Pull`
    // response. Otherwise, the system may wait (for a bounded amount of time)
    // until at least one message is available, rather than returning no messages.
    // Warning: setting this field to `true` is discouraged because it adversely
    // impacts the performance of `Pull` operations. We recommend that users do
    // not set this field.
    bool return_immediately = 2
    [deprecated = true, (google.api.field_behavior) = OPTIONAL];

    // Required. The maximum number of messages to return for this request. Must
    // be a positive integer. The Pub/Sub system may return fewer than the number
    // specified.
    int32 max_messages = 3 [(google.api.field_behavior) = REQUIRED];
}

// Response for the `Pull` method.
message PullResponse {
    // Received Pub/Sub messages. The list will be empty if there are no more
    // messages available in the backlog. For JSON, the response can be entirely
    // empty. The Pub/Sub system may return fewer than the `maxMessages` requested
    // even if there are more messages available in the backlog.
    repeated ReceivedMessage received_messages = 1;
}

// A message and its corresponding acknowledgment ID.
message ReceivedMessage {
    // This ID can be used to acknowledge the received message.
    string ack_id = 1;

    // The message.
    PubsubMessage message = 2;

    // The approximate number of times that Cloud Pub/Sub has attempted to deliver
    // the associated message to a subscriber.
    //
    // More precisely, this is 1 + (number of NACKs) +
    // (number of ack_deadline exceeds) for this message.
    //
    // A NACK is any call to ModifyAckDeadline with a 0 deadline. An ack_deadline
    // exceeds event is whenever a message is not acknowledged within
    // ack_deadline. Note that ack_deadline is initially
    // Subscription.ackDeadlineSeconds, but may get extended automatically by
    // the client library.
    //
    // Upon the first delivery of a given message, `delivery_attempt` will have a
    // value of 1. The value is calculated at best effort and is approximate.
    //
    // If a DeadLetterPolicy is not set on the subscription, this will be 0.
    int32 delivery_attempt = 3;
}

// Request for the `StreamingPull` streaming RPC method. This request is used to
// establish the initial stream as well as to stream acknowledgements and ack
// deadline modifications from the client to the server.
message StreamingPullRequest {
    // Required. The subscription for which to initialize the new stream. This
    // must be provided in the first request on the stream, and must not be set in
    // subsequent requests from client to server.
    // Format is `projects/{project}/subscriptions/{sub}`.
    string subscription = 1 [(google.api.field_behavior) = REQUIRED];

    // List of acknowledgement IDs for acknowledging previously received messages
    // (received on this stream or a different stream). If an ack ID has expired,
    // the corresponding message may be redelivered later. Acknowledging a message
    // more than once will not result in an error. If the acknowledgement ID is
    // malformed, the stream will be aborted with status `INVALID_ARGUMENT`.
    repeated string ack_ids = 2;

    // The list of new ack deadlines for the IDs listed in
    // `modify_deadline_ack_ids`. The size of this list must be the same as the
    // size of `modify_deadline_ack_ids`. If it differs the stream will be aborted
    // with `INVALID_ARGUMENT`. Each element in this list is applied to the
    // element in the same position in `modify_deadline_ack_ids`. The new ack
    // deadline is with respect to the time this request was sent to the Pub/Sub
    // system. Must be >= 0. For example, if the value is 10, the new ack deadline
    // will expire 10 seconds after this request is received. If the value is 0,
    // the message is immediately made available for another streaming or
    // non-streaming pull request. If the value is < 0 (an error), the stream will
    // be aborted with status `INVALID_ARGUMENT`.
    repeated int32 modify_deadline_seconds = 3;

    // List of acknowledgement IDs whose deadline will be modified based on the
    // corresponding element in `modify_deadline_seconds`. This field can be used
    // to indicate that more time is needed to process a message by the
    // subscriber, or to make the message available for redelivery if the
    // processing was interrupted.
    repeated string modify_deadline_ack_ids = 4;

    // Required. The ack deadline to use for the stream. This must be provided in
    // the first request on the stream, but it can also be updated on subsequent
    // requests from client to server. The minimum deadline you can specify is 10
    // seconds. The maximum deadline you can specify is 600 seconds (10 minutes).
    int32 stream_ack_deadline_seconds = 5
    [(google.api.field_behavior) = REQUIRED];

    // A unique identifier that is used to distinguish client instances from each
    // other. Only needs to be provided on the initial request. When a stream
    // disconnects and reconnects for the same stream, the client_id should be set
    // to the same value so that state associated with the old stream can be
    // transferred to the new stream. The same client_id should not be used for
    // different client instances.
    string client_id = 6;

    // Flow control settings for the maximum number of outstanding messages. When
    // there are `max_outstanding_messages` or more currently sent to the
    // streaming pull client that have not yet been acked or nacked, the server
    // stops sending more messages. The sending of messages resumes once the
    // number of outstanding messages is less than this value. If the value is
    // <= 0, there is no limit to the number of outstanding messages. This
    // property can only be set on the initial StreamingPullRequest. If it is set
    // on a subsequent request, the stream will be aborted with status
    // `INVALID_ARGUMENT`.
    int64 max_outstanding_messages = 7;

    // Flow control settings for the maximum number of outstanding bytes. When
    // there are `max_outstanding_bytes` or more worth of messages currently sent
    // to the streaming pull client that have not yet been acked or nacked, the
    // server will stop sending more messages. The sending of messages resumes
    // once the number of outstanding bytes is less than this value. If the value
    // is <= 0, there is no limit to the number of outstanding bytes. This
    // property can only be set on the initial StreamingPullRequest. If it is set
    // on a subsequent request, the stream will be aborted with status
    // `INVALID_ARGUMENT`.
    int64 max_outstanding_bytes = 8;
}

// Response for the `StreamingPull` method. This response is used to stream
// messages from the server to the client.
message StreamingPullResponse {
    // Received Pub/Sub messages. This will not be empty.
    repeated ReceivedMessage received_messages = 1;
}

// Request for the DeleteSubscription method.
message DeleteSubscriptionRequest {
    // Required. The subscription to delete.
    // Format is `projects/{project}/subscriptions/{sub}`.
    string subscription = 1 [(google.api.field_behavior) = REQUIRED];
}

// Request for the ModifyAckDeadline method.
message ModifyAckDeadlineRequest {
    // Required. The name of the subscription.
    // Format is `projects/{project}/subscriptions/{sub}`.
    string subscription = 1 [(google.api.field_behavior) = REQUIRED];

    // Required. List of acknowledgment IDs.
    repeated string ack_ids = 4 [(google.api.field_behavior) = REQUIRED];

    // Required. The new ack deadline with respect to the time this request was
    // sent to the Pub/Sub system. For example, if the value is 10, the new ack
    // deadline will expire 10 seconds after the `ModifyAckDeadline` call was
    // made. Specifying zero might immediately make the message available for
    // delivery to another subscriber client. This typically results in an
    // increase in the rate of message redeliveries (that is, duplicates).
    // The minimum deadline you can specify is 0 seconds.
    // The maximum deadline you can specify is 600 seconds (10 minutes).
    int32 ack_deadline_seconds = 3 [(google.api.field_behavior) = REQUIRED];
}

// An admin topic resource.
message AdminTopic {
    // Required. The name of the topic. It must have the format
    // `"projects/{project}/topics/{topic}"`. `{topic}` must start with a letter,
    // and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
    // underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent
    // signs (`%`). It must be between 3 and 255 characters in length, and it
    // must not start with `"goog"`.
    string name = 1 [(google.api.field_behavior) = REQUIRED];

    map<string, string> labels = 2;

    int32 num_partitions = 3;
}

// Request made on the push endpoint
message PushEndpointRequest {
    // Required. The messages to publish.
    PubsubMessage message = 1 [(google.api.field_behavior) = REQUIRED];

    // Required. The message in the request was published for this subscription.
    string subscription = 2 [(google.api.field_behavior) = REQUIRED];

    // Optional. The number of attempts made to deliver this message.
    uint32 delivery_attempt = 3 [(google.api.field_behavior) = OPTIONAL];
}

// Request for the `Fetch` method.
message FetchRequest {
    // Required. The subscription from which messages should be pulled.
    // Format is `projects/{project}/subscriptions/{sub}`.
    string subscription = 1 [(google.api.field_behavior) = REQUIRED];

    // Required. The partition number from where the messages need to be fetched for this request. Must
    // be a positive integer.
    int32 partition = 2 [(google.api.field_behavior) = REQUIRED];

    // Required. The maximum number of messages to return for this request. Must
    // be a positive integer. The Pub/Sub system may return fewer than the number
    // specified.
    int32 max_messages = 3 [(google.api.field_behavior) = REQUIRED];
}

service ConsumePlane {

    // Fetch messages from the broker. The server may return `UNAVAILABLE` if
    // there are too many concurrent pull requests pending for the given
    // subscription.
    rpc Fetch(FetchRequest) returns (PullResponse) {
        option (google.api.http) = {
            post: "/v1/{subscription=projects/*/subscriptions/*}:fetch"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Pull messages"
            description: "Pull messages for a subscription"
            tags: "Subscriptions"
        };
    }

    // Acknowledges the messages associated with the `ack_ids` in the
    // `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages
    // from the subscription.
    //
    // Acknowledging a message whose ack deadline has expired may succeed,
    // but such a message may be redelivered later. Acknowledging a message more
    // than once will not result in an error.
    rpc Acknowledge(AcknowledgeRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/{subscription=projects/*/subscriptions/*}:acknowledge"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Acknowledge messages"
            description: "Acknowledge messages associated with ack_ids"
            tags: "Subscriptions"
        };
    }

    // Modifies the ack deadline for a specific message. This method is useful
    // to indicate that more time is needed to process a message by the
    // subscriber, or to make the message available for redelivery if the
    // processing was interrupted. Note that this does not modify the
    // subscription-level `ackDeadlineSeconds` used for subsequent messages.
    rpc ModifyAckDeadline(ModifyAckDeadlineRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/{subscription=projects/*/subscriptions/*}:modifyAckDeadline"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Modify Ack Deadline"
            description: "Modify Ack Deadline"
            tags: "Subscriptions"
        };
    }
}

// Request for the `ListTopicSubscriptions` method.
message ListTopicSubscriptionsRequest {
    // Required. The name of the topic that subscriptions are attached to.
    // Format is `projects/{project}/topics/{topic}`.
    string topic = 1 [(google.api.field_behavior) = REQUIRED];
}

// Response for the `ListTopicSubscriptions` method.
message ListTopicSubscriptionsResponse {
    // The names of subscriptions attached to the topic specified in the request.
    repeated string subscriptions = 1;
}

// Request for the `ListProjectSubscriptions` method.
message ListProjectSubscriptionsRequest {
    // Required. The project_id in which subscriptions are created.
    string project_id = 1 [(google.api.field_behavior) = REQUIRED];
}

// Response for the `ListProjectSubscriptions` method.
message ListProjectSubscriptionsResponse {
    // The names of subscriptions created in the specified project.
    repeated string subscriptions = 1;
}